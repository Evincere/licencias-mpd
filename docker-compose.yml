# Docker Compose para Sistema de Licencias MPD
# Configuración completa para desarrollo y producción

version: '3.8'

services:
  # ================================
  # FRONTEND - Next.js Application
  # ================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: runner
    container_name: licencias-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:3001
      - NEXT_PUBLIC_APP_ENV=production
      - NEXT_PUBLIC_GENKIT_URL=http://genkit:4001
      - NEXT_PUBLIC_WHATSAPP_API_URL=http://whatsapp:5001
    depends_on:
      - backend
      - redis
    networks:
      - licencias-network
    volumes:
      - frontend-logs:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ================================
  # BACKEND - API Server
  # ================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: licencias-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://licencias_user:${DB_PASSWORD:-postgres}@postgres:5432/licencias_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-default-jwt-secret}
      - OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID}
      - OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET}
      - ZIMBRA_API_URL=${ZIMBRA_API_URL}
      - WHATSAPP_BUSINESS_TOKEN=${WHATSAPP_BUSINESS_TOKEN}
      - GENKIT_API_URL=http://genkit:4001
    depends_on:
      - postgres
      - redis
    networks:
      - licencias-network
    volumes:
      - backend-logs:/app/logs
      - backend-uploads:/app/uploads

  # ================================
  # DATABASE - PostgreSQL
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: licencias-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=licencias_db
      - POSTGRES_USER=licencias_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=es_AR.UTF-8 --lc-ctype=es_AR.UTF-8
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    networks:
      - licencias-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U licencias_user -d licencias_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ================================
  # CACHE - Redis
  # ================================
  redis:
    image: redis:7-alpine
    container_name: licencias-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - licencias-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

# ================================
# NETWORKS
# ================================
networks:
  licencias-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================
# VOLUMES
# ================================
volumes:
  # Database
  postgres-data:
    driver: local
  redis-data:
    driver: local

  # Application logs
  frontend-logs:
    driver: local
  backend-logs:
    driver: local

  # Application data
  backend-uploads:
    driver: local