import { chromium, FullConfig } from '@playwright/test'

async function globalSetup(config: FullConfig) {
  console.log('üöÄ Iniciando setup global para tests E2E...')
  
  // Verificar que el servidor est√© corriendo
  const browser = await chromium.launch()
  const page = await browser.newPage()
  
  try {
    // Intentar acceder a la p√°gina principal
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle' })
    console.log('‚úÖ Servidor frontend disponible')
    
    // Verificar que la API est√© disponible
    const response = await page.request.get('http://localhost:3001/api/health')
    if (response.ok()) {
      console.log('‚úÖ API backend disponible')
    } else {
      console.log('‚ö†Ô∏è API backend no disponible, usando mocks')
    }
    
    // Configurar datos de prueba si es necesario
    await setupTestData()
    
  } catch (error) {
    console.error('‚ùå Error en setup global:', error)
    throw error
  } finally {
    await browser.close()
  }
  
  console.log('‚úÖ Setup global completado')
}

async function setupTestData() {
  // Aqu√≠ se pueden configurar datos de prueba
  // Por ejemplo, crear usuarios de prueba, limpiar base de datos, etc.
  console.log('üìä Configurando datos de prueba...')
  
  // Mock de datos de empleados para testing
  const testEmployees = [
    {
      id: 'test_emp_001',
      nombre: 'Juan',
      apellido: 'P√©rez',
      email: 'juan.perez.test@jus.mendoza.gov.ar',
      area: 'Defensor√≠a Civil',
      jerarquia: 'FUNCIONARIO'
    },
    {
      id: 'test_emp_002',
      nombre: 'Mar√≠a',
      apellido: 'Garc√≠a',
      email: 'maria.garcia.test@jus.mendoza.gov.ar',
      area: 'Defensor√≠a Penal',
      jerarquia: 'MAGISTRADO'
    }
  ]
  
  // En un entorno real, aqu√≠ se insertar√≠an en la base de datos
  console.log(`üìù Configurados ${testEmployees.length} empleados de prueba`)
}

export default globalSetup
